{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acben\\\\Documents\\\\React_Portfolio\\\\react_portfolio\\\\src\\\\components\\\\Contactform.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react'; // Here we import a helper function that will check if the email is valid\n\nimport { validateEmail } from '../utils/helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Contactform() {\n  _s();\n\n  // Create state variables for the fields in the form\n  // We are also setting their initial values to an empty string\n  const [email, setEmail] = useState('');\n  const [name, setName] = useState('');\n  const [message, setMessage] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleInputChange = e => {\n    // Getting the value and name of the input which triggered the change\n    const {\n      target\n    } = e;\n    const inputType = target.name;\n    const inputValue = target.value; // Based on the input type, we set the state of either email, person's name, and their message\n\n    if (inputType === 'email') {\n      setEmail(inputValue);\n    } else if (inputType === 'name') {\n      setName(inputValue);\n    } else {\n      setMessage(inputValue);\n    }\n  };\n\n  const handleFormSubmit = e => {\n    // Preventing the default behavior of the form submit (which is to refresh the page)\n    e.preventDefault(); // First we check to see if the email is not valid or if the name/message is empty. If so we set an error message to be displayed on the page.\n\n    if (!validateEmail(email) || !name || !message) {\n      setErrorMessage('Email, name, or message are invalid. Please fill out all areas.'); // We want to exit out of this code block if something is wrong so that the user can correct it\n\n      return;\n    }\n\n    alert(`Thanks for contacting me ${name}!`); // If everything goes according to plan, we want to clear out the input after a successful registration.\n\n    setName('');\n    setMessage('');\n    setEmail('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"contactform\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Contact Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group contactItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          for: \"emailfield\",\n          children: \"Email:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          value: email,\n          name: \"email\",\n          onChange: handleInputChange,\n          type: \"email\",\n          placeholder: \"email\",\n          id: \"emailfield\",\n          className: \"form-control\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group contactItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          for: \"namefield\",\n          children: \"Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          value: name,\n          name: \"name\",\n          onChange: handleInputChange,\n          type: \"text\",\n          placeholder: \"Name\",\n          id: \"namefield\",\n          className: \"form-control\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group contactItem\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          for: \"messagefield\",\n          children: \"Message:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: message,\n          name: \"message\",\n          onChange: handleInputChange,\n          type: \"text\",\n          placeholder: \"Message\",\n          id: \"messagefield\",\n          rows: \"3\",\n          className: \"form-control\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleFormSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Contactform, \"bU6RkskOt7Up89GqlVAWpEK/p18=\");\n\n_c = Contactform;\nexport default Contactform;\n\nvar _c;\n\n$RefreshReg$(_c, \"Contactform\");","map":{"version":3,"sources":["C:/Users/acben/Documents/React_Portfolio/react_portfolio/src/components/Contactform.js"],"names":["React","useState","validateEmail","Contactform","email","setEmail","name","setName","message","setMessage","errorMessage","setErrorMessage","handleInputChange","e","target","inputType","inputValue","value","handleFormSubmit","preventDefault","alert"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\n\r\n// Here we import a helper function that will check if the email is valid\r\nimport { validateEmail } from '../utils/helpers';\r\n\r\nfunction Contactform() {\r\n  // Create state variables for the fields in the form\r\n  // We are also setting their initial values to an empty string\r\n  const [email, setEmail] = useState('');\r\n  const [name, setName] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  const handleInputChange = (e) => {\r\n    // Getting the value and name of the input which triggered the change\r\n    const { target } = e;\r\n    const inputType = target.name;\r\n    const inputValue = target.value;\r\n\r\n    // Based on the input type, we set the state of either email, person's name, and their message\r\n    if (inputType === 'email') {\r\n      setEmail(inputValue);\r\n    } else if (inputType === 'name') {\r\n      setName(inputValue);\r\n    } else {\r\n      setMessage(inputValue);\r\n    }\r\n  };\r\n\r\n  const handleFormSubmit = (e) => {\r\n    // Preventing the default behavior of the form submit (which is to refresh the page)\r\n    e.preventDefault();\r\n\r\n    // First we check to see if the email is not valid or if the name/message is empty. If so we set an error message to be displayed on the page.\r\n    if (!validateEmail(email) || !name || !message) {\r\n      setErrorMessage('Email, name, or message are invalid. Please fill out all areas.');\r\n      // We want to exit out of this code block if something is wrong so that the user can correct it\r\n      return;\r\n    }\r\n   \r\n    alert(`Thanks for contacting me ${name}!`);\r\n\r\n    // If everything goes according to plan, we want to clear out the input after a successful registration.\r\n    setName('');\r\n    setMessage('');\r\n    setEmail('');\r\n  };\r\n\r\n  return (\r\n    <div className=\"contactform\">\r\n      <h1 >Contact Form</h1>\r\n      \r\n      <form className=\"form\">\r\n          <div className = \"form-group contactItem\">\r\n              <label for = \"emailfield\">Email:</label>\r\n            <input\r\n                value={email}\r\n                name=\"email\"\r\n                onChange={handleInputChange}\r\n                type=\"email\"\r\n                placeholder=\"email\"\r\n                id=\"emailfield\"\r\n                className=\"form-control\"\r\n            />\r\n          </div>\r\n\r\n          <div className = \"form-group contactItem\">\r\n              <label for = \"namefield\">Name:</label>\r\n              <input\r\n                value={name}\r\n                name=\"name\"\r\n                onChange={handleInputChange}\r\n                type=\"text\"\r\n                placeholder=\"Name\"\r\n                id=\"namefield\"\r\n                className=\"form-control\"\r\n                />\r\n          </div>\r\n\r\n          <div className = \"form-group contactItem\">\r\n              <label for = \"messagefield\">Message:</label>\r\n              <textarea\r\n                value={message}\r\n                name=\"message\"\r\n                onChange={handleInputChange}\r\n                type=\"text\"\r\n                placeholder=\"Message\"\r\n                id=\"messagefield\"\r\n                rows=\"3\"\r\n                className=\"form-control\"\r\n            />\r\n          </div>       \r\n        \r\n        \r\n        <button type=\"button\" onClick={handleFormSubmit}>Submit</button>\r\n      </form>\r\n      \r\n      {errorMessage && (\r\n        <div>\r\n          <p className=\"error-text\">{errorMessage}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Contactform;"]},"metadata":{},"sourceType":"module"}