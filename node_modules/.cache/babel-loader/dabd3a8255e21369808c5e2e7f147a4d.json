{"ast":null,"code":"import _slicedToArray from\"C:/Users/acben/Documents/React_Portfolio/react_portfolio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';// Here we import a helper function that will check if the email is valid\nimport{validateEmail}from'../utils/helpers';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Contactform(){// Create state variables for the fields in the form\n// We are also setting their initial values to an empty string\nvar _useState=useState(''),_useState2=_slicedToArray(_useState,2),email=_useState2[0],setEmail=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),name=_useState4[0],setName=_useState4[1];var _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),message=_useState6[0],setMessage=_useState6[1];var _useState7=useState(''),_useState8=_slicedToArray(_useState7,2),errorMessage=_useState8[0],setErrorMessage=_useState8[1];var handleInputChange=function handleInputChange(e){// Getting the value and name of the input which triggered the change\nvar target=e.target;var inputType=target.name;var inputValue=target.value;// Based on the input type, we set the state of either email, person's name, and their message\nif(inputType==='email'){setEmail(inputValue);}else if(inputType==='name'){setName(inputValue);}else{setMessage(inputValue);}};var handleFormSubmit=function handleFormSubmit(e){// Preventing the default behavior of the form submit (which is to refresh the page)\ne.preventDefault();// First we check to see if the email is not valid or if the name/message is empty. If so we set an error message to be displayed on the page.\nif(!validateEmail(email)||!name||!message){setErrorMessage('Email, name, or message are invalid. Please fill out all areas.');// We want to exit out of this code block if something is wrong so that the user can correct it\nreturn;}alert(\"Thanks for contacting me \".concat(name,\"!\"));// If everything goes according to plan, we want to clear out the input after a successful registration.\nsetName('');setMessage('');setEmail('');};return/*#__PURE__*/_jsxs(\"div\",{className:\"contactform\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Contact Form\"}),/*#__PURE__*/_jsxs(\"form\",{className:\"form\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-group contactItem\",children:[/*#__PURE__*/_jsx(\"label\",{for:\"emailfield\",children:\"Email:\"}),/*#__PURE__*/_jsx(\"input\",{value:email,name:\"email\",onChange:handleInputChange,type:\"email\",placeholder:\"email\",id:\"emailfield\",className:\"form-control\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group contactItem\",children:[/*#__PURE__*/_jsx(\"label\",{for:\"namefield\",children:\"Name:\"}),/*#__PURE__*/_jsx(\"input\",{value:name,name:\"name\",onChange:handleInputChange,type:\"text\",placeholder:\"Name\",id:\"namefield\",className:\"form-control\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group contactItem\",children:[/*#__PURE__*/_jsx(\"label\",{for:\"messagefield\",children:\"Message:\"}),/*#__PURE__*/_jsx(\"textarea\",{value:message,name:\"message\",onChange:handleInputChange,type:\"text\",placeholder:\"Message\",id:\"messagefield\",rows:\"3\",className:\"form-control\"})]}),/*#__PURE__*/_jsx(\"button\",{className:\"contactbtn\",type:\"button\",onClick:handleFormSubmit,children:\"Submit\"})]}),errorMessage&&/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"p\",{className:\"error-text\",children:errorMessage})})]});}export default Contactform;","map":{"version":3,"sources":["C:/Users/acben/Documents/React_Portfolio/react_portfolio/src/components/Contactform.js"],"names":["React","useState","validateEmail","Contactform","email","setEmail","name","setName","message","setMessage","errorMessage","setErrorMessage","handleInputChange","e","target","inputType","inputValue","value","handleFormSubmit","preventDefault","alert"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\n\r\n// Here we import a helper function that will check if the email is valid\r\nimport { validateEmail } from '../utils/helpers';\r\n\r\nfunction Contactform() {\r\n  // Create state variables for the fields in the form\r\n  // We are also setting their initial values to an empty string\r\n  const [email, setEmail] = useState('');\r\n  const [name, setName] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  const handleInputChange = (e) => {\r\n    // Getting the value and name of the input which triggered the change\r\n    const { target } = e;\r\n    const inputType = target.name;\r\n    const inputValue = target.value;\r\n\r\n    // Based on the input type, we set the state of either email, person's name, and their message\r\n    if (inputType === 'email') {\r\n      setEmail(inputValue);\r\n    } else if (inputType === 'name') {\r\n      setName(inputValue);\r\n    } else {\r\n      setMessage(inputValue);\r\n    }\r\n  };\r\n\r\n  const handleFormSubmit = (e) => {\r\n    // Preventing the default behavior of the form submit (which is to refresh the page)\r\n    e.preventDefault();\r\n\r\n    // First we check to see if the email is not valid or if the name/message is empty. If so we set an error message to be displayed on the page.\r\n    if (!validateEmail(email) || !name || !message) {\r\n      setErrorMessage('Email, name, or message are invalid. Please fill out all areas.');\r\n      // We want to exit out of this code block if something is wrong so that the user can correct it\r\n      return;\r\n    }\r\n   \r\n    alert(`Thanks for contacting me ${name}!`);\r\n\r\n    // If everything goes according to plan, we want to clear out the input after a successful registration.\r\n    setName('');\r\n    setMessage('');\r\n    setEmail('');\r\n  };\r\n\r\n  return (\r\n    <div className=\"contactform\">\r\n      <h1 >Contact Form</h1>\r\n      \r\n      <form className=\"form\">\r\n          <div className = \"form-group contactItem\">\r\n              <label for = \"emailfield\">Email:</label>\r\n            <input\r\n                value={email}\r\n                name=\"email\"\r\n                onChange={handleInputChange}\r\n                type=\"email\"\r\n                placeholder=\"email\"\r\n                id=\"emailfield\"\r\n                className=\"form-control\"\r\n            />\r\n          </div>\r\n\r\n          <div className = \"form-group contactItem\">\r\n              <label for = \"namefield\">Name:</label>\r\n              <input\r\n                value={name}\r\n                name=\"name\"\r\n                onChange={handleInputChange}\r\n                type=\"text\"\r\n                placeholder=\"Name\"\r\n                id=\"namefield\"\r\n                className=\"form-control\"\r\n                />\r\n          </div>\r\n\r\n          <div className = \"form-group contactItem\">\r\n              <label for = \"messagefield\">Message:</label>\r\n              <textarea\r\n                value={message}\r\n                name=\"message\"\r\n                onChange={handleInputChange}\r\n                type=\"text\"\r\n                placeholder=\"Message\"\r\n                id=\"messagefield\"\r\n                rows=\"3\"\r\n                className=\"form-control\"\r\n            />\r\n          </div>       \r\n        \r\n        \r\n        <button className = \"contactbtn\" type=\"button\" onClick={handleFormSubmit}>Submit</button>\r\n      </form>\r\n      \r\n      {errorMessage && (\r\n        <div>\r\n          <p className=\"error-text\">{errorMessage}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Contactform;"]},"metadata":{},"sourceType":"module"}